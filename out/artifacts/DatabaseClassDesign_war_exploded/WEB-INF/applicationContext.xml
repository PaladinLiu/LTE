<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- Spring除过控制器不要，剩下的业务逻辑组件都要，包括dao，包括service -->
    <context:component-scan base-package="myj2ee">
        <!-- 扫描排除不写use-default-filters="false" -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--0、导入外部配置文件  -->
    <context:property-placeholder location="/WEB-INF/dbconfig.properties"/>
    <!--1、配数据源  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="username" value="${jdbcUsername}"></property>
        <property name="password" value="${jdbcPassword}"></property>
        <property name="url" value="${jdbcUrl}"></property>
        <property name="driverClassName" value="${jdbcDriverClassName}"></property>
        <property name="initialSize" value="${jdbcInitialSize}"></property>
        <property name="maxActive" value="${jdbcMaxActive}"></property>
    </bean>

    <!--2、配置JdbcTemplate操作数据库。pass  -->
    <!--3、配置使用mybatis操作数据库  -->
    <!-- 可以根据配置文件得到sqlSessionFactory -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定配置文件位置 -->
        <property name="configLocation" value="/WEB-INF/mybatis.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <!-- 指定xml映射文件的位置 -->
        <property name="mapperLocations" value="/WEB-INF/mybatis-mapper/*.xml"></property>
    </bean>
    <!-- 我们要把每一个dao接口的实现加入到ioc容器； -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定dao接口所在的包 -->
        <property name="basePackage" value="myj2ee.dao"></property>
    </bean>
    <!-- <mybatis-spring:scan base-package="com.atguigu.dao"/> -->


    <!--4、配置事务控制;配置事务管理器，让他控制住数据源里面的链接的关闭和提交  -->
    <bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--5、基于xml配置，配置事务；哪些方法切入事务还要写切入点表达式  -->
    <aop:config>
        <!--配置切入点表达式  -->
        <aop:pointcut expression="execution(* myj2ee.service.*.*(..))" id="txPoint"/>
        <aop:advisor advice-ref="myTx" pointcut-ref="txPoint"/>
    </aop:config>

    <!--6、配置事务增强、事务属性、事务建议
     transaction-manager="tm"：指定要配置的事务管理器的id
    -->
    <tx:advice id="myTx" transaction-manager="tm">
        <!-- 配置事务属性 -->
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true"/>
            <!-- <tx:method name="insertEmp" isolation="READ_UNCOMMITTED"/> -->
        </tx:attributes>
    </tx:advice>
</beans>